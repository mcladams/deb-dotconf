#! /usr/bin/env bash

set -e

# environmental variables
CONFIG_GIT='https://github.com/mcladams/deb-dotconf

# Remove all i386 packages from multilib system (optional)
function rm_i386() {
    if [[ ! $(dpkg --print-foreign-architectures) = *i386* ]]; then
        echo "i386 is not a dkpg foreign architecture, nothing to do"
        return
    else
        local pkgs=$( apt list | grep ' i386 ' | grep -E -e '^[^/]*')
        sudo apt purge --allow-remove-essential $(echo "$pkgs" | sed -E 's/^(.*)$/\1:i386/g')
    fi
    sudo dpkg --remove-architecture i386
}

# only apt update if it has not been run in the 10 minutes
function apt-update() {
    if [ $(( `date +%s` - `stat -c %Y /var/cache/apt/pkgcache.bin` )) -gt 600 ]; then
        sudo apt update && sudo apt upgrade -y
    fi
}

# Install dependencies not already installed, checking when last apt update
# https://unix.stackexchange.com/questions/235605/check-if-all-listed-packages-are-installed-in-bash
function inst_pkgs() {
    local pkgs=$@
    # apt list returns a line for each architecture if foreign architectures
    local newpkgs=$(apt list $pkgs 2>/dev/null | grep -e $(dpkg --print-architecture)$ -e all$ | cut -d/ -f1)
    [ -z "$newpkgs" ] || sudo apt install -y $newpkgs
}

# Install deb-get (by script via curl) to install DEBs from git repos & direct dl
# https://github.com/wimpysworld/deb-get
function inst_debget() {
    local depends="curl lsb-release wget"
    inst_pkgs $depends
    curl -sL https://raw.githubusercontent.com/wimpysworld/deb-get/main/deb-get \
        | sudo -E bash -s install deb-get
}

# Install makedeb from script - will add repo to sources
# Ref: https://docs.makedeb.org/installing/shell-script/
function inst_makedeb() {
    local depends="apt binutils build-essential curl fakeroot file gettext gawk \
        libarchive-tools lsb-release python3 python3-apt zstd"
    inst_pkgs $depends
    bash -ci "$(wget -qO - 'https://shlink.makedeb.org/install')"
}

# Install gitub CLI and setup git for authentication using it
# Ref: https://github.com/cli/cli/blob/trunk/docs/install_linux.md
function inst_gh {
    curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg \
        | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
    sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
    echo "deb [ arch=amd64 signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg ] https://cli.github.com/packages stable main" \
        | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
    sudo apt-get update -o Dir::Etc::sourcelist="sources.list.d/github-cli.list"
    sudo apt install gh -y
    gh auth setup-git
    gh config set editor nano
    gh config set git_protocol https --host github.com
    gh auth login --protocol https --hostname github.com --web
}

# Install latest Neovim from github using makedeb
function inst_neovim() {
    local builddeps="cmake cmake-data doxygen libclang-cpp14 libclang1-14 libjsoncpp25 \
        libllvm14 librhash0 libtool-bin ninja-build"
    local rundeps="libc6 liblusjit-5.1-2 libluajit2-5.1-2 libmsgpackc2 libtermkey1 \
        libtree-sitter0 libunibilium4 libuv1 libvterm0 lua-luv"
    inst_pkgs "$builddeps $rundeps"
    mkdir -p /usr/local/git/org.makedeb.mpr
    cd /usr/local/git/org.makedeb.mpr
    git clone https://mpr.makedeb.org/neovim
    cd neovim
    makedeb -si
}


# Install rust via standard rustup script with profile
function inst_rust() {
    if [ -f $HOME/.profile.d/cargo-bin-path.sh ]; then
        source $HOME/.profile.d/cargo-bin-path.sh
    else
        export CARGO_HOME=/usr/local/cargo && export RUSTUP_HOME=/usr/local/rustup
    fi
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
}

# Install atuin with cargo and setup
inst_atuin() {
    cargo install atuin
    curl https://raw.githubusercontent.com/rcaloras/bash-preexec/master/bash-preexec.sh \
        -o ~/.bash-preexec.sh
    echo '[[ -f ~/.bash-preexec.sh ]] && source ~/.bash-preexec.sh' >> ~/.bashrc
    echo 'eval "$(atuin init bash)"' >> ~/.bashrc
}

# Install wezterm
#function
# requires http://ftp.debian.org/debian/pool/main/o/openssl/libssl1.1_1.1.1w-0~deb11u1_amd64.deb
# from https://github.com/wez/wezterm/releases/latest

# Install starship prompt and a powerline toml
function inst_starship() {
    curl -sS https://starship.rs/install.sh | sh
    echo 'eval "$(starship init bash)"' >> $HOME/.bashrc
}

# Init new system
function init_gitconfig() {
    local depends="git gawk"
    inst_pkgs $depends
    sudo usermod -aG adm,dialout,cdrom,sudo,dip,lpadmin $USER
    sudo chmod -R ug+rwX,o+rX,o-w /usr/local
    sudo chown -R root:adm /usr/local
    if [ ! -f $HOME/.conf.git ]; then
        git clone --bare $CONFIG_GIT $HOME/.conf.git
        alias conf='git --git-dir=$HOME/.conf.git --work-tree=$HOME'
        git stash
        conf restore --staged $(conf status -uno -s | awk '{print $2}')
        conf restore $(conf status -uno -s | awk '{print $2]')
    fi
}

# Apply functions as necessary
[[ -d $HOME/.conf.git ]] || (echo "Cloning git origin..." && init_gitconfig && "Done.")
type -p deb-get || (echo "Installing deb-get from github deb-get.." && inst_debget)
type -p gh >/dev/null || (echo "Installing gh from githuibcli-archive..." && inst_gh)
type -p makedeb >/dev/null || (echo "Installing makedeb with deb-get..." && inst_makedeb)
type -p nvim >/dev/null || (echo "Installing neovim..." && inst_neovim )
type -p rustc >/dev/null || (echo "Installing rustup script for cargo, rustc, etc..." && inst_rust)
#type -p wezterm
type -p starship  >/dev/null || (echo "Installing starship prompt..." && inst_starship && "Done.")
